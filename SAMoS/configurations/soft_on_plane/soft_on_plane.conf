# * ***************************************************************************
# *
# *  Copyright (C) 2013-2016 University of Dundee
# *  All rights reserved. 
# *
# *  This file is part of SAMoS (Soft Active Matter on Surfaces) program.
# *
# *  SAMoS is free software; you can redistribute it and/or modify
# *  it under the terms of the GNU General Public License as published by
# *  the Free Software Foundation; either version 2 of the License, or
# *  (at your option) any later version.
# *
# *  SAMoS is distributed in the hope that it will be useful,
# *  but WITHOUT ANY WARRANTY; without even the implied warranty of
# *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# *  GNU General Public License for more details.
# *
# *  You should have received a copy of the GNU General Public License
# *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
# *
# * ****************************************************************************

#
#  Simulation of N=3183 active particles interacting with the 
#  soft-core potential confined on the surface of the xy plane
#  


# All runtime messages will be sent to file messages.msg
messages messages.msg

# Every simulation requires a box
# "periodic" means that periodic boundary are applied.
# box is cubic with size 100x100x10 (units of particle radius r = 1) and spans from -50 to 50 in 
# x and y directions and -5 to 5 in z direction
box periodic { lx = 100.0;  ly = 100.0;  lz = 10.0 }

# We read in particle positions from file plane.dat (generated by tools in utils directory)
input plane.dat

# We set the neighbour list with cutoff distance 2.4 and padding distance of 0.5
nlist { rcut = 2.5; pad = 0.5 }

#group g1 { type = 1 }
#group g2 { type = 2 }

# In following we define different data outputs

# Output particle velocities. Base name of the file is plane_test
# File extension will we '.vel'. Output will be generated every 10000 time steps
# staring from the step 0. Each snapshots will be stored in a separate file (keyword 'multi')
# with name plane_test_[time_step].vel (e.g., plane_test_0000010000.vel)
# and each file with contain a header with the description of its content
dump plane_test { type=velocity; start=0; freq=10000; multi; header }

# Same as above, but the format will be XYZ and file extension '.xyz'
dump plane_test { type=xyz; start=0; freq=10000; multi; header }

# In order to generate a trajectory, we output coordinates every 1000 time steps
# In this case all snapshots will be stored in one file 'plane_test.dcd'
dump plane_test { type=dcd; start=0; freq=1000  }

# We also want to generate a director field file that can be directly visualized by SimRePlay
# In this case all snapshots will be stored in one file 'plane_test_dir.xyzv'
dump plane_test_dir { type=xyzv; start=0; freq=1000; scale = 0.25; header  }

# In addition we want to generate a velocity field file that can be directly visualized by SimRePlay
# In this case all snapshots will be stored in one file 'plane_test_vel.xyzv'
dump plane_test_vel { type=xyzv; start=0; freq=1000; scale = 0.1; velocity; header  }


# Finally, every 10000 steps we generate a separate file that contains 
# particle coordinates, velocities anf the director field (and the header)
dump plane_test { type=full; start=0; freq=1000; multi; coordinate; velocity; director; header  }
dump plane_test { type=vtp; start=0; freq=1000;  }


# We constrain all particles to move only on the xy plane with lx=100, ly = 100 (actually those are read from the box)
constraint plane {  }


# All particles are interacting with the soft-core potential of strength 
# k = 1.0 (energy units)
pair_potential soft { k = 1.0 }
#pair_potential gaussian { A = 3.0; B = -1.0; alpha = 3.0; beta = 3.0; rA = 0.0; rB = 1.0 }
#pair_potential morse { D=1.0; a = 4.0; use_particle_radii }



# Alignment will be done using polar aligner 
# Coupling constant J = 1.0 (energy units)
pair_align polar { J = 1.0 }


# We would also like to monitor measure a few quantities
# Here we define a log that keeps track of step, velocity, soft core potenetial energy, and alignment 
# These quantities will be logged once every 1000 steps
# Note that step is always logged automatically
#log plane_test.log { freq = 1000; velocity; soft_energy; polar_align }
#log plane_test.log { freq = 1000; velocity; morse_energy }


# In order to relax the system and remove large overlaps 
# we first run system using NVE integrator with maximum 
# displacement limit=0.001. Time step is dt = 0.001
timestep 0.001
integrator nve { limit=0.0001 }


# Run for 10,000 steps
run 10000


disable nve { group=all }

# Lines below should be uncommented for simulating a multicomponent system

#pair_param gaussian { type_1 = 1; type_2 = 1; A = 3.0; B = 0.0; alpha = 3.0; beta = 3.0; rA = 0.0; rB = 1.0 }
#pair_param gaussian { type_1 = 1; type_2 = 2; A = 3.0; B = -1.0; alpha = 3.0; beta = 3.0; rA = 0.0; rB = 1.0 }
#pair_param gaussian { type_1 = 2; type_2 = 2; A = 3.0; B = 0.0; alpha = 3.0; beta = 3.0; rA = 0.0; rB = 1.0 }

#align_param polar { type_1 = 1; type_2 = 1; J = 1.0 }
#align_param polar { type_1 = 1; type_2 = 2; J = 10.0 }
#align_param polar { type_1 = 2; type_2 = 2; J = 1.0 }

external self_propulsion { alpha = 1.0 }

# NOTE: This example uses obsolete syntax that includes activity into integrator.
# Now we are at the point to execute actual simulations. 
# We switch the integrator to brownian.
# Integrate equations of motion using Brownian dynamics.
# seed is the initial seed for the random number generator
# dt is the integrator time step (in Lennard-Jones units) 
# nu sets the width of the distribution for random changes of velocity
# mu is particle mobility
# v0 is the intensity of the self-propelling velocity
timestep 0.01
integrator brownian_pos { seed = 1;  mu = 1.0; group = all }
integrator brownian_align { seed = 1;  mur = 1.0; nu = 0.1; group = all }
#integrator brownian { dt=0.0005; seed = 2;  nu = 0.01; mu = 1.0;  v0 = 2.5; group = g2 }


# Finally, we run simulation for 100,000 time steps
run 50000



