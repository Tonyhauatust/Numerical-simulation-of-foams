# * ***************************************************************************
# *
# *  Copyright (C) 2013-2016 University of Dundee
# *  All rights reserved. 
# *
# *  This file is part of SAMoS (Soft Active Matter on Surfaces) program.
# *
# *  SAMoS is free software; you can redistribute it and/or modify
# *  it under the terms of the GNU General Public License as published by
# *  the Free Software Foundation; either version 2 of the License, or
# *  (at your option) any later version.
# *
# *  SAMoS is distributed in the hope that it will be useful,
# *  but WITHOUT ANY WARRANTY; without even the implied warranty of
# *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# *  GNU General Public License for more details.
# *
# *  You should have received a copy of the GNU General Public License
# *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
# *
# * ****************************************************************************

# 
#  Simulation of active polymer on a plane  

# Messages produced by the simulation are sent to messages.msg file
messages messages.msg 

# Every simulation requires a box 
# "periodic" means that periodic boundary are applied
# box is cubic with size 40x40x10 (units of particle radius r = 1) and spans from -20 to 20 in 
# x and y directions and -5 to 5 in z direction
box periodic {lx= 61.000000; ly = 61.000000 ; lz = 2.000000 } 

# We read in particle positions from file plane.dat (generated by tools in utils directory)
input filaments.input

# Read bonds (connectivity infomration between beads on the polymer)
read_bonds filaments.bonds

# Read angles (for simulating chain stiffness)
read_angles filaments.angles

# We set the neighbour list with cutoff distance 2.4 and padding distance of 0.5
nlist { rcut = 3.0; pad = 0.5 }

# In following we define different data outputs
# Ouput configuration in MOL2 format
dump poly_test { type=vtp; start=0; freq=100; multi;  }

# We constrain all particles to move only on the xy plane 
constraint plane {  } 

# polymers tend to align their tangent vectors
external_align tangent { tau = 0.1 }

# All particles are interacting with the Lennard-Jones potential potential of strength 1 
pair_potential lj { epsilon = 1.0; sigma = 1.0; rcut = 2.5; shifted }

# Activity is modelled using "motors", i.e., filaments puch against each other if their 
# tangnet vectors point in oposite direction 
pair_potential motor { alpha = 2.0; beta = 2.0; a = 1.5 } 

# add harmonic bonds 
bond harmonic { k = 330.0; l_eq = 1.0 } 

# add harmonic angle potential 
angle harmonic { k = 10.0} 


# We use NVE integrator to cure unphysical overlaps
integrator nve { dt=0.005; limit=0.0001 } 


# Run for 10,000 steps 
run 1000


disable nve { group=all } 


# Now we are at the point to execute actual simulations 
# We switch the integrator to brownian.
# Integrate equations of motion using Brownian dynamics.
# seed is the initial seed for the random number generator 
# dt is the integrator time step (in Lennard-Jones units) 
# nu sets the width of the distribution for random changes of velocity 
# mu is particle mobility 
# v0 is the intensity of the self-propelling velocity
# we use contstant temperature, with the value set by paramter min_val 
integrator brownian { dt=0.00025; seed = 1;  nu = 0.0; mu = 1.0; v0 = 0.0; temperature_control=constant; min_val = 0.5; group = all } 
#integrator brownian { dt=0.001; seed = 1;  nu = 0.0; mu = 1.0; v0 = 0.0; group = all } 


# Finally, we run simulation for 1,000,000 time steps 
run 100000
