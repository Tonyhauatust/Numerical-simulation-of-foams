# * *************************************************************
# *  
# *   Soft Active Mater on Surfaces (SAMoS)
# *   
# *   Author: Rastko Sknepnek
# *  
# *   Division of Physics
# *   School of Engineering, Physics and Mathematics
# *   University of Dundee
# *   
# *   (c) 2013, 2014
# * 
# *   School of Science and Engineering
# *   School of Life Sciences 
# *   University of Dundee
# * 
# *   (c) 2015
# * 
# *   Author: Silke Henkes
# * 
# *   Department of Physics 
# *   Institute for Complex Systems and Mathematical Biology
# *   University of Aberdeen  
# * 
# *   (c) 2014, 2015
# *  
# *   This program cannot be used, copied, or modified without
# *   explicit written permission of the authors.
# * 
# * ***************************************************************

#
#  Simulation of N=3183 particles of two types interacting with the 
#  soft-core potential confined on the surface of the xy plane. 50% of 
#  particles are acive moving with active velocity v0=0.5. Other 50% of 
#  the particles are passive, but subject to Brownian noise at T=0.3.
#  


# All runtime messages will be sent to file messages.msg
messages messages.msg

# Every simulation requires a box
# "periodic" means that periodic boundary are applied.
# box is cubic with size 100x100x10 (units of particle radius r = 1) and spans from -50 to 50 in 
# x and y directions and -5 to 5 in z direction
box periodic { lx = 100.0;  ly = 100.0;  lz = 10.0 }

# We read in particle positions from file plane.dat (generated by tools in utils directory)
input plane.dat

# We set the neighbour list with cutoff distance 2.4 and padding distance of 0.5
nlist { rcut = 2.5; pad = 0.5 }

group passive  { type = 1 }
group active   { type = 2 }

# In following we define different data outputs


# Every 10000 steps we generate a separate file that contains 
# particle radius, type, coordinates, velocities and the director field (and the header)
dump two_component { type=full; start=0; freq=1000; multi; radius; tp; coordinate; velocity; director; header  }


# We constrain all particles to move only on the xy plane 
constraint plane {  }


# All particles are interacting with the soft-core potential of strength 
# k = 1.0 (energy units)
pair_potential soft { k = 1.0 }


# Alignment will be done using polar aligner 
# Coupling constant J = 1.0 (energy units)
pair_align polar { J = 1.0 }


# We would also like to monitor measure a few quantities
# Here we define a log that keeps track of step, velocity, soft core potenetial energy, and alignment 
# These quantities will be logged once every 1000 steps
# Note that step is always logged automatically
log two_component.log { freq = 1000; velocity; soft_energy; polar_align }


# In order to relax the system and remove large overlaps 
# we first run system using NVE integrator with maximum 
# displacement limit=0.001. Time step is dt = 0.001
integrator nve { dt=0.001; limit=0.0001 }


# Run for 10,000 steps
run 10000


# we need to disable nve integrator
disable nve { group=all }

# We want only active paritcles to align with each other, we we only set J=1 for 2-2 pairs
align_param polar { type_1 = 1; type_2 = 1; J = 0.0 }
align_param polar { type_1 = 1; type_2 = 2; J = 0.0 }
align_param polar { type_1 = 2; type_2 = 2; J = 1.0 }

# Now we are at the point to execute actual simulations. 
# We switch the integrator to brownian.
# Integrate equations of motion using Brownian dynamics.
# seed is the initial seed for the random number generator
# dt is the integrator time step (in Lennard-Jones units) 
# nu sets the width of the distribution for random changes of velocity
# mu is particle mobility
# v0 is the intensity of the self-propelling velocity
# we first set integrator for active particles
integrator brownian { group = active; dt=0.001; seed = 1;  nu = 0.001; mu = 1.0;  v0 = 0.5; }

# and another one for passive particles, but this time at temperature T = 0.3
# temperature_control tells integrator to use constnat temeprature set by paramter
# min_val. in this case max_val and steps are ignored. if we choose temperature_control=linear
# then temeprature in linearly interpolated between min_val and max_val 
integrator brownian { group = passive; dt=0.001; seed = 4;  nu = 0.00; mu = 1.0;  v0 = 0.0; temperature_control=constant; min_val=0.3; max_val=0.3; steps = 1000 }

# Finally, we run simulation for 100,000 time steps
run 100000



