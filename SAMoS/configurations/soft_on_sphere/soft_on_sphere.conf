# * ***************************************************************************
# *
# *  Copyright (C) 2013-2016 University of Dundee
# *  All rights reserved. 
# *
# *  This file is part of SAMoS (Soft Active Matter on Surfaces) program.
# *
# *  SAMoS is free software; you can redistribute it and/or modify
# *  it under the terms of the GNU General Public License as published by
# *  the Free Software Foundation; either version 2 of the License, or
# *
# *  (at your option) any later version.
# *  SAMoS is distributed in the hope that it will be useful,
# *  but WITHOUT ANY WARRANTY; without even the implied warranty of
# *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# *  GNU General Public License for more details.
# *
# *  You should have received a copy of the GNU General Public License
# *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
# *
# * ****************************************************************************/

# Example configuration file for simulating N = 316 soft spherical 
# monodisperse polar active particles on the surface of a sphere of radius R = 10
# Packing fraction \phi = 0.7

# Utility code for building random initial configuration on a sphere
# WARNING! Configuration files are case sensitive!

# All runtime messages will be sent to file messages.msg
messages messages.msg

# Send metadata into file confing.json
config sphere { type = json }

# Every simulation requires a box
# "fixed" means that no periodic boundary is applied (irrelevant here due to spherical geometry)
# box is cubic with size 30x30x30 (lenght units) and spans from -15 to 15 in 
# each direction 
box fixed { lx = 30.0;  ly = 30.0;  lz = 30.0 }

# We read in particle positions from file sphere.dat 
input sphere.dat

# We set the neighbour list with cutoff distance 1.5 and padding distance of 0.5
nlist { rcut = 2.4; pad = 0.5 }

# In following we define different data outputs

# Output particle velocities. Base name of the file is sphere_example
# File extension will we '.vtp'. Output will be generated every 1000 time steps
# staring from the step 0. Each snapshots will be stored in a separate file (keyword 'multi')
# with name sphere_example_[time_step].vtp (e.g., sphere_example_0000010000.vtp)
dump sphere_example { type = vtp; start = 0; freq=1000; multi; directory = /tmp }

# Finally, every 1000 steps we generate a separate file that contains 
# particle id, type, coordinates, velocities and directors
# we also output keys (this file can be used to restart the simulation)
dump sphere_example { type=full; start=0; freq=1000; multi; id; type; radius; coordinate; velocity; director; keys  }


# We constrain all particles to move only on the surface of a sphere if radius r = 10
constraint sphere { r = 10 }


# All particles are interacting with the soft-core potential of strength 
# k = 10.0 (energy units)
# a = 1.0 (distance parameter for the soft-core potential)
pair_potential soft { k = 10.0; a = 1.0 }


# Alignment will be done using polar aligner 
# Coupling constant J = 1.0 (energy units)
pair_align polar { J = 1.0 }

# We would also like to monitor measure a few quantities
# Here we define a log that keeps track of step, velocity, soft core potenetial energy, and alignment 
# These quantities will be logged once every 100 steps
# Note that step is always logged automatically
log sphere_example.log { freq = 100; velocity; soft_energy; polar_align }

# Set time step is dt = 0.01
timestep 0.01

# In order to relax the system and remove large overlaps 
# we first run system using NVE integrator with maximum 
# displacement limit=0.001.
integrator nve { limit=0.0001  }

# Run for 10,000 steps
run 10000

# We are done with the relaxation and we need to disable the NVE interator
disable nve { group = all }

# we now add self-propulsion in the direction of the director
# alpha = 1.0 is the strength of propulsion
external self_propulsion { alpha = 1.0 }

# Now we are at the point to execute actual simulations. 
# We switch to the Brownian integrator for particle position
# Integrate equations of motion using Brownian dynamics.
# seed is the initial seed for the random number generator
# mu is particle mobility
# we are also going to add a bit of thermal noise (temperature set to 0.1)
# we'll use constant temperature (temperature_control = constant)
integrator brownian_pos { seed = 0; mu = 1.0;  temperature_control = constant; min_val = 0.1 }

# in order to integrate equations of motion for the director, we'll also use Brownian 
# dynamics integrator. We'll set seed for the random number generator to 0 and 
# add a bit of rotational noise (nu = 0.01)
integrator brownian_align { seed = 0; nu = 0.01;  }

# Finally, we run simulation for 100,000 time steps
run 100000


