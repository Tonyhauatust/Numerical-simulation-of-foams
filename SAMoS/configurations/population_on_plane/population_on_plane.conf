# * *************************************************************
# *  
# *   Soft Active Mater on Surfaces (SAMoS)
# *   
# *   Author: Rastko Sknepnek
# *  
# *   Division of Physics
# *   School of Engineering, Physics and Mathematics
# *   University of Dundee
# *   
# *   (c) 2013, 2014
# * 
# *   School of Science and Engineering
# *   School of Life Sciences 
# *   University of Dundee
# * 
# *   (c) 2015
# * 
# *   Author: Silke Henkes
# * 
# *   Department of Physics 
# *   Institute for Complex Systems and Mathematical Biology
# *   University of Aberdeen  
# * 
# *   (c) 2014, 2015
# *  
# *   This program cannot be used, copied, or modified without
# *   explicit written permission of the authors.
# * 
# * ***************************************************************

#
#  Simulation of N=3183 active particles interacting with the 
#  soft-core potential confined on the surface of the xy plane
#  We also allow for population control using random population.
#  


# All runtime messages will be sent to file messages.msg
messages messages.msg

# Every simulation requires a box
# "periodic" means that periodic boundary are applied.
# box is cubic with size 100x100x10 (units of particle radius r = 1) and spans from -50 to 50 in 
# x and y directions and -5 to 5 in z direction
box periodic { lx = 100.0;  ly = 100.0;  lz = 10.0 }

# We read in particle positions from file plane.dat (generated by tools in utils directory)
input plane.dat

# We set the neighbour list with cutoff distance 2.4 and padding distance of 0.5
nlist { rcut = 2.5; pad = 0.5 }


# In following we define different data outputs

# Output particle velocities. Base name of the file is plane_test
# File extension will we '.vel'. Output will be generated every 10000 time steps
# staring from the step 0. Each snapshots will be stored in a separate file (keyword 'multi')
# with name plane_test_[time_step].vel (e.g., plane_test_0000010000.vel)
# and each file with contain a header with the description of its content
#dump plane_test { type=velocity; start=0; freq=10000; multi; header }

# Same as above, but the format will be XYZ and file extension '.xyz'
#dump plane_test { type=xyz; start=0; freq=10000; multi; header }

# In order to generate a trajectory, we output coordinates every 1000 time steps
# In this case all snapshots will be stored in one file 'plane_test.dcd'
#dump plane_test { type=dcd; start=0; freq=1000  }

# We also want to generate a director field file that can be directly visualized by SimRePlay
# In this case all snapshots will be stored in one file 'plane_test_dir.xyzv'
#dump plane_test_dir { type=xyzv; start=0; freq=1000; scale = 0.25; header  }

# In addition we want to generate a velocity field file that can be directly visualized by SimRePlay
# In this case all snapshots will be stored in one file 'plane_test_vel.xyzv'
#dump plane_test_vel { type=xyzv; start=0; freq=1000; scale = 0.1; velocity; header  }


# Finally, every 10000 steps we generate a separate file that contains 
# particle coordinates, velocities anf the director field (and the header)
dump plane_test { type=full; start=0; freq=10000; multi; id; flag; tp; radius; coordinate; velocity; director; header  }


# We constrain all particles to move only on the xy plane with lx=100, ly = 100 (actually those are read from the box)
constraint plane { lx = 100; ly = 100 }


# All particles are interacting with the soft-core potential of strength 
# k = 1.0 (energy units)
pair_potential soft { k = 1.0; ntypes = 1 }
#pair_potential morse { D = 1.5; a = 1.0; re = 1 }


# We would also like to monitor measure a few quantities
# Here we define a log that keeps track of step, velocity, soft core potenetial energy, and alignment 
# These quantities will be logged once every 1000 steps
# Note that step is always logged automatically
log plane_test.log { freq = 1000; velocity; soft_energy }


# In order to relax the system and remove large overlaps 
# we first run system using NVE integrator with maximum 
# displacement limit=0.001. Time step is dt = 0.001
integrator nve { dt=0.001; limit=0.0001 }


# Run for 10,000 steps
run 10000

# Disable integrator nve
disable nve { group=all }

#define group "g" with particles of type 2
group g { type = 2 }
group p { type = 1 }

# Now we are at the point to execute actual simulations. 
# We switch the integrator to brownian.
# Integrate equations of motion using Brownian dynamics.
# seed is the initial seed for the random number generator
# dt is the integrator time step (in Lennard-Jones units) 
# nu sets the width of the distribution for random changes of velocity
# mu is particle mobility
# v0 is the intensity of the self-propelling velocity
integrator brownian { dt=0.001; seed = 1;  nu = 0.8; mu = 1.0;  v0 = 0.5 }

# Apply random population control only to group "g"
# Particle division rate is set to 1000
# Particle removal rate is set to 1000
# Division and removal are attempted only every 1000 steps
population density { group = g; division_rate = 0.1; death_rate = 0.0; freq = 100; change_prob_1 = 0.0; split_distance = 2.0; change_prob_2 = 1.0; old_group = g; new_group = p; old_type = 2; new_type = 1  }
#population density { group = all; division_rate = 0.1; death_rate = 0.001; freq = 1000  }
population density { group = p; division_rate = 0.0; death_rate = 1e-4; freq = 100; change_prob_1 = 0.0; change_prob_2 = 0.0  }

ntypes 6

# Finally, we run simulation for 100,000 time steps
run 1000000



