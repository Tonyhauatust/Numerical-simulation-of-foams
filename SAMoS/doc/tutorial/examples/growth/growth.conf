# * ***************************************************************************
# *
# *  Copyright (C) 2013-2016 University of Dundee
# *  All rights reserved. 
# *
# *  This file is part of SAMoS (Soft Active Matter on Surfaces) program.
# *
# *  SAMoS is free software; you can redistribute it and/or modify
# *  it under the terms of the GNU General Public License as published by
# *  the Free Software Foundation; either version 2 of the License, or
# *
# *  (at your option) any later version.
# *  SAMoS is distributed in the hope that it will be useful,
# *  but WITHOUT ANY WARRANTY; without even the implied warranty of
# *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# *  GNU General Public License for more details.
# *
# *  You should have received a copy of the GNU General Public License
# *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
# *
# * ****************************************************************************/

# Example of growing cells
# Division is implemented in a simple way (see tutorial) and new cells are "roughly" inserted into the 
# system. Adding cells usually works fine however in some critial cases cells of extreme shape will cause a crash.
#
# We take some care in setting our parameters so that this introduction of new cells doesn't
# put too great a strain on the system. Lowering the timestep is the only completely reliable 
# way to stabilise the simulation during division.

# All runtime messages will be sent to file messages.msg
messages messages.msg
config configuration {type = json}

# A really large box for growth
box fixed { lx = 1000.0;  ly = 1000.0;  lz = 10.0 }

# We read in particle positions 
input sfinal.input

# Read boundary connectivity
read_cell_boundary sfinal.boundary

# max_perimeter and max_edge_len refer to the triangulation faces and edges. 
# The triangulation flag indicates that our particles are vertices of a mesh and we are running a cell simulation.
nlist { rcut = 2.4; pad = 0.5; build_faces; max_perimeter = 30.0; max_edge_len = 20.0; triangulation; }

# We constrain all particles to move only in the xy plane.
constraint plane { unlimited  }

# Cell potential
# K is the area term stiffness, gamma is the perimeter stiffness 
# lambda is the junction tension
#
# shape tensor p_0 = 3.1 with A_0 = pi
# We phase in the new forces in the system due to the introduction of the two new particles over
#  100 timesteps. No. timesteps = max_val/timestep
# This smoothes out the dynamics and prevents crashes in some cases.
pair_potential vp { K = 1.0; gamma = 1.0; lambda = -5.5; phase_in=linear; min_val=0.; max_val=0.5 }

# line tension only applies to the particles that are on the boundary
# those particles do not have a polygon assigned to them and are, as such, 
# not considered cells
pair_potential line_tension { lambda = 0.5; }
pair_potential boundary_bending { kappa = 0.3; }

# Soft repulsion stabilises the simulation in a number of ways.
#
# This potential serves an important purpose during division by affecting a
# soft constraint on the shape of the triangulation.  For an obtuse triangle in
# the triangulation, as its obtuse angle tends to \pi so the radius of the
# circumcircle and the corresponding dual vertex go to infinity. This is not by
# itself a problem however as the obtuse angle becomes large, small movements
# in the associated triangle vertex cause wild changes in the position of the
# dual vertex. we cannot handle this behaviour without drastically reducing the
# timestep. Soft repulsion solves this problem by maintaining some separation
# between the vertices of the triangle.
#
# Again the forces due to this potential are phased in over 100 timesteps.
pair_potential soft { k = 10.0; a = 1.0; phase_in=linear; min_val=0.; max_val=0.5 }

# frequent logging of simple metrics
log cell.log { freq = 100; size; area; avg_perim; vp_energy }

# .vtp file for the cell centres, boundary particles and delaunay triangulation.
dump cell { type=vtp; start=0; freq=1000; include_mesh; multi }
# .vtp file for the polygonal cell shapes
dump cell_dual { type=vtp; start=0; freq=1000; multi; dual }
# Data dump. Has extension '.dat' .
dump cell { type=full; start=0; freq=1000; multi; id; tp; boundary; coordinate; velocity; force; director; area; cell_area; cell_perim; keys }
# faces files can be used to reconstruct the triangulation and the mesh in python for analysis.
dump faces { type=face; start=0; freq=1000; multi; }


# Population growth dynamics 
# If death_rate is non-zero then cells may die with probability based on their
# age.  The freq parameter controls the frequency with which Samos checks
# whether cell divisions should occur.  In this case cells will have the
# opportunity to divide every 25 steps. Lower numbers give smoother rate of
# division but that comes at the cost of extra computation.  Cells have their
# preferred area increased at a rate set by 'growth_rate'.  Cells can divide if
# their area is greater than max_area and do so with a probability that
# increases linearly with area and with the factor 'division_rate'.
population cell { group = internal; division_rate = 0.01; freq = 25; max_area = 2.8; growth_rate = 0.002; death_rate = 0.0 }

# Running the simulation
#
# Often helpful to have a lower timestep for simulations with division. Here it is 0.005.
timestep 0.005

# Flexible boundary
integrator brownian_pos {group= all; seed = 1; mu = 1.0; }

run 100000
#run 1000000



