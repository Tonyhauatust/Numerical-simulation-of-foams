# * ***************************************************************************
# *
# *  Copyright (C) 2013-2016 University of Dundee
# *  All rights reserved. 
# *
# *  This file is part of SAMoS (Soft Active Matter on Surfaces) program.
# *
# *  SAMoS is free software; you can redistribute it and/or modify
# *  it under the terms of the GNU General Public License as published by
# *  the Free Software Foundation; either version 2 of the License, or
# *
# *  (at your option) any later version.
# *  SAMoS is distributed in the hope that it will be useful,
# *  but WITHOUT ANY WARRANTY; without even the implied warranty of
# *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# *  GNU General Public License for more details.
# *
# *  You should have received a copy of the GNU General Public License
# *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
# *
# * ****************************************************************************/

# Example for cell types and cell sorting

# All runtime messages will be sent to file messages.msg
messages messages.msg
config configuration {type = json}

# box is cubic with size 100x100x10 
box fixed { lx = 100.0;  ly = 100.0;  lz = 10.0 }

# We read in particle positions 
input epi.input

# Read boundary connectivity
read_cell_boundary epi.boundary


# max_perimeter and max_edge_len refer to the triangulation faces and edges. 
# The triangulation flag indicates that our particles are vertices of a mesh and we are running a cell simulation.
nlist { rcut = 2.4; pad = 0.5; build_faces; max_perimeter = 30.0; max_edge_len = 20.0; triangulation; }

# We constrain all particles to move only on the xy plane.
constraint plane { unlimited  }

# Cell potential
# K is the area term stiffness, gamma is the perimeter stiffness 
# lambda is the junction tension
# 
pair_potential vp { K = 1.0; gamma = 1.0; lambda = -6.3; }

# There are three types of particles in the simulation. Type 1 corresponds to boundary particles
# and not cells while types 2 and 3 correspond to cell types with different parameters.

# Set lambda between types so that type 2 and type 3 cell contacts are costly
# This line just overwrites the values of lambda for contacts between cells of type 2 and those of type 3
# Cell types are set in the input file and must be a range starting from 1. I chose to set the boundary 
# particles to a distinct type, 1, and then the two types of cells are types 2 and 3.
# There is no type 0.
#
# Each line overwrites lambda for one pair of types. If it not overwritten the default value is used as set 
# on the "pair_potential vp" line above.
#pair_param vp { type_1=1; type_2=1; lambda = -0.5 }
#pair_param vp { type_1=1; type_2=2; lambda = -6.5 }
#pair_param vp { type_1=1; type_2=3; lambda = -6.5 }

pair_param vp { type_1=2; type_2=3; lambda = -5.8 }
#pair_param vp { type_1=2; type_2=2; lambda = -6.5 }
#pair_param vp { type_1=3; type_2=3; lambda = -6.5 }


# line tension only applies to the particles that are on the boundary
pair_potential line_tension { lambda = 2.0; }
pair_potential boundary_bending { kappa = 0.1; }

# Soft repulsion at reasonable distance
pair_potential soft { k = 10.0; a = 0.5}

# frequent logging of simple metrics
log cell.log { freq = 100; size; area; avg_perim; vp_energy }


# Set freq=100 for these four lines if you want to see the dynamics on shorter timescales
#
# .vtp file for the cell centres, boundary particles and delaunay triangulation.
dump cell { type=vtp; start=0; freq=1000; include_mesh; multi }
# .vtp file for the polygonal cell shapes
dump cell_dual { type=vtp; start=0; freq=1000; multi; dual }
# Data dump. Has extension '.dat' .
dump cell { type=full; start=0; freq=1000; multi; id; tp; boundary; coordinate; velocity; force; director; area; cell_area; cell_perim; keys }
# Faces files can be used to reconstruct the triangulation and the polygonal mesh in python for analysis.
dump faces { type=face; start=0; freq=1000; multi; }

# Running the simulation
# Such a low timestep won't be necessary
timestep 0.01

# Instead of activity we just have an uncorrelated random noise
# Sorting experiments with activity instead are similarly interesting
integrator brownian_pos {group= all; seed = 1;  mu = 1.0; temperature_control=constant; min_val=0.02 }

run 50000



